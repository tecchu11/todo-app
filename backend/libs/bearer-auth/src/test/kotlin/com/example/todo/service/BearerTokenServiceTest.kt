package com.example.todo.service

import com.auth0.jwt.JWT
import com.auth0.jwt.algorithms.Algorithm
import com.example.todo.config.BearerTokenConfig
import com.example.todo.type.BearerToken
import com.example.todo.type.Payload
import io.mockk.MockKAnnotations
import io.mockk.every
import io.mockk.impl.annotations.InjectMockKs
import io.mockk.impl.annotations.MockK
import io.mockk.mockkStatic
import org.amshove.kluent.invoking
import org.amshove.kluent.`should be equal to`
import org.amshove.kluent.`should throw`
import org.amshove.kluent.`with message`
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.MethodSource
import org.springframework.security.authentication.BadCredentialsException
import java.time.Clock
import java.time.Duration
import java.time.Instant
import java.time.ZoneId
import java.time.temporal.ChronoUnit

class BearerTokenServiceTest {

    @MockK
    private lateinit var bearerTokenConfig: BearerTokenConfig

    @InjectMockKs
    private lateinit var bearerTokenService: BearerTokenService

    companion object {
        private val testConfig = BearerTokenConfig(
            issuer = "tecchu11",
            expireAfter = Duration.of(Int.MAX_VALUE.toLong(), ChronoUnit.SECONDS),
            secretKey = "test",
        )
        private const val SUB = "test client"
        private const val ROLE = "TEST"
        private const val EXTRA_CLAIM_KEY = "id"
        private val EXTRA_CLAIM = EXTRA_CLAIM_KEY to "test"
        private const val ROLE_CLAIM_NAME = "role"
        private const val NOW = 1675335600000L // 2023-02-02T11:00:00Z
        private val fixedClock = Clock.fixed(
            Instant.ofEpochMilli(NOW),
            ZoneId.of("Asia/Tokyo")
        )

        @JvmStatic
        private fun verificationGeneratedBearerToke() = listOf(
            Arguments.of(SUB, ROLE, emptyMap<String, String>()),
            Arguments.of(SUB, ROLE, mapOf("id" to "test")),
        )

        @JvmStatic
        private fun verificationPayloadExactly() = listOf(
            Arguments.of(
                """Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
                            |.eyJzdWIiOiJ0ZXN0IGNsaWVudCIsInJvbGUiOiJU
                            |RVNUIiwiaXNzIjoidGVjY2h1MTEiLCJleHAiOjM4MjI4MTkyNDcsImlhdCI6MTY3NTMzNTYwMH0
                            |._bXaDwBWWNqlyY8djfuqjppBMCZzROpBAFtpdnyRUcY"""
                    .trimMargin()
                    .replace("\n", ""),
                false to arrayOf("dummy"),
                Payload(testConfig.issuer, SUB, ROLE, emptyMap()),
            ),
            Arguments.of(
                """Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
                            |.eyJzdWIiOiJ0ZXN0IGNsaWVudCIsInJvbGUiOiJU
                            |RVNUIiwiaXNzIjoidGVjY2h1MTEiLCJpZCI6InRlc
                            |3QiLCJleHAiOjM4MjI4MTkyNDcsImlhdCI6MTY3NTMzNTYwMH0
                            |.9fWWMYPVqgM-97z9rvxXOrNlHFjT39xxILqPPN_gc4Y"""
                    .trimMargin()
                    .replace("\n", ""),
                true to arrayOf(EXTRA_CLAIM_KEY),
                Payload(testConfig.issuer, SUB, ROLE, mapOf(EXTRA_CLAIM)),
            ),
        )
    }

    @BeforeEach
    fun setUp() {
        MockKAnnotations.init(this)
        mockkStatic(Clock::class)
        every { bearerTokenConfig.issuer } returns testConfig.issuer
        every { bearerTokenConfig.expireAfter } returns testConfig.expireAfter
        every { bearerTokenConfig.secretKey } returns testConfig.secretKey
        every { Clock.systemUTC() } returns fixedClock
        every { Instant.now() } returns fixedClock.instant()
    }

    @ParameterizedTest
    @MethodSource("verificationGeneratedBearerToke")
    fun `Verify bearer token generated by generate method has correct payload`(
        sub: String,
        role: String,
        extra: Map<String, String>
    ) {
        val bearerToken = bearerTokenService.generate(sub, role, extra)

        val decoded = JWT.require(Algorithm.HMAC256(bearerTokenConfig.secretKey))
            .withIssuer(bearerTokenConfig.issuer)
            .build()
            .verify(bearerToken.jws)

        decoded.issuer `should be equal to` bearerTokenConfig.issuer
        decoded.subject `should be equal to` sub
        decoded.getClaim(ROLE_CLAIM_NAME).asString() `should be equal to` role
        decoded.issuedAtAsInstant `should be equal to` Instant.now()
        decoded.expiresAtAsInstant `should be equal to` Instant.now().plus(bearerTokenConfig.expireAfter)
        extra.forEach {
            decoded.getClaim(it.key).asString() `should be equal to` it.value
        }
    }

    /**
     * *NOTE* ParameterizedTest does not support kotlin value class.
     * See [junit5 issue](https://github.com/junit-team/junit5/issues/2703)
     */
    @ParameterizedTest
    @MethodSource("verificationPayloadExactly")
    fun `Verify the payload returned verify method equal to expected payload`(
        data: String,
        withExtra: Pair<Boolean, Array<String>>,
        expected: Payload,
    ) {
        val actual = if (!withExtra.first) {
            bearerTokenService.verify(BearerToken.from(data))
        } else {
            bearerTokenService.verify(BearerToken.from(data), *withExtra.second)
        }

        actual `should be equal to` expected
    }

    @Test
    fun `Verify verify method with invalid bearer token throws BadCredentialsException`() {
        val invalidToken = BearerToken.from("Bearer invalid")
        val expectedThrowable = BadCredentialsException::class
        val expectedMessage = "Client requested with invalid jws"
        invoking {
            bearerTokenService.verify(invalidToken)
        } `should throw` expectedThrowable `with message` expectedMessage
    }
}
